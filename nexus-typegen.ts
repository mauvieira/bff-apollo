/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Character: { // root type
    gender: string; // String!
    id: number; // Int!
    image: string; // String!
    location: NexusGenRootTypes['Location']; // Location!
    name: string; // String!
    origin: NexusGenRootTypes['Origin']; // Origin!
    species: string; // String!
    status: string; // String!
  }
  Dragon: { // root type
    active: boolean; // Boolean!
    capsule?: string | null; // String
    crew_capacity: number; // Int!
    id: string; // String!
    name: string; // String!
  }
  Link: { // root type
    description: string; // String!
    id: number; // Int!
    url: string; // String!
  }
  Location: { // root type
    name: string; // String!
    url: string; // String!
  }
  Origin: { // root type
    name: string; // String!
    url: string; // String!
  }
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Character: { // field return type
    gender: string; // String!
    id: number; // Int!
    image: string; // String!
    location: NexusGenRootTypes['Location']; // Location!
    name: string; // String!
    origin: NexusGenRootTypes['Origin']; // Origin!
    species: string; // String!
    status: string; // String!
  }
  Dragon: { // field return type
    active: boolean; // Boolean!
    capsule: string | null; // String
    crew_capacity: number; // Int!
    id: string; // String!
    name: string; // String!
  }
  Link: { // field return type
    description: string; // String!
    id: number; // Int!
    url: string; // String!
  }
  Location: { // field return type
    name: string; // String!
    url: string; // String!
  }
  Origin: { // field return type
    name: string; // String!
    url: string; // String!
  }
  Query: { // field return type
    characters: NexusGenRootTypes['Character'][]; // [Character!]!
    dragons: NexusGenRootTypes['Dragon'][]; // [Dragon!]!
    feed: NexusGenRootTypes['Link'][]; // [Link!]!
  }
}

export interface NexusGenFieldTypeNames {
  Character: { // field return type name
    gender: 'String'
    id: 'Int'
    image: 'String'
    location: 'Location'
    name: 'String'
    origin: 'Origin'
    species: 'String'
    status: 'String'
  }
  Dragon: { // field return type name
    active: 'Boolean'
    capsule: 'String'
    crew_capacity: 'Int'
    id: 'String'
    name: 'String'
  }
  Link: { // field return type name
    description: 'String'
    id: 'Int'
    url: 'String'
  }
  Location: { // field return type name
    name: 'String'
    url: 'String'
  }
  Origin: { // field return type name
    name: 'String'
    url: 'String'
  }
  Query: { // field return type name
    characters: 'Character'
    dragons: 'Dragon'
    feed: 'Link'
  }
}

export interface NexusGenArgTypes {
  Query: {
    characters: { // args
      page?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}